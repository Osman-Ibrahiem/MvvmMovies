plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id "androidx.navigation.safeargs.kotlin"
}

apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.osman.themoviedb"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "BASE_URL", "\"${getProperty("key.properties", "base_url")}\""
        buildConfigField "String", "IMAGE_URL", "\"${getProperty("key.properties", "image_url_500")}\""
        buildConfigField "String", "API_KEY", "\"${getProperty("key.properties", "api_key")}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }

    bundle {
        language {
            enableSplit = false
        }
    }
}

configurations {
    ktlint
}

dependencies {

    api project(path: ':data')

    // Default dependencies
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.core:core-ktx:1.7.0'

    // ui
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    // Carbon
    implementation 'tk.zielony:carbon:0.17.0'
    // ConstraintLayout
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    // SwipeRefreshLayout
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    // Fragment
    implementation 'androidx.fragment:fragment-ktx:1.4.0'
    // Activity
    implementation 'androidx.activity:activity-ktx:1.4.0'
    // sdp & ssp
    implementation 'com.intuit.sdp:sdp-android:1.0.6'
    implementation 'com.intuit.ssp:ssp-android:1.0.6'
    //loading view
    implementation 'com.wang.avi:library:2.1.3'

    // Navigation Component
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'

    // Dagger Hilt
    implementation 'com.google.dagger:hilt-android:2.40.4'
    implementation "androidx.hilt:hilt-navigation-fragment:1.0.0"
    kapt 'com.google.dagger:hilt-android-compiler:2.40.4'
//    kapt "com.google.dagger:hilt-compiler:2.37"

    //glide
    implementation "com.github.bumptech.glide:glide:4.12.0"
    kapt "com.github.bumptech.glide:compiler:4.12.0"

    
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename)
        }
    } else {
        print(filename + " does not exist!")
    }
}